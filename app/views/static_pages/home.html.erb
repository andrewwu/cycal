<div class="container">

<div class="cal-1">
  <script type="text/template" id="template-calendar">

    <div class="row">
      <div class="col-md-6">
        <div class="clndr-controls btn-group">

          <div class="clndr-previous-button btn btn-default">
            <span class="glyphicon glyphicon-chevron-left"></span>
          </div>

          <div class="month btn btn-default"><%%= month + " " + year %></div>

          <div class="clndr-next-button btn btn-default">
            <span class="glyphicon glyphicon-chevron-right"></span>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-md-2">
        <div class="goal-header">Weekly Goals</div>
        <div class="goals">

          <%% var weekly_total = 0; %>

          <%% _.each(days, function(day, index) { %>

            <%% if (!_.isEmpty(day.events)) { %>
              <%% weekly_total += (day.events[0].duration / 60); %>
            <%% } %>

            <%% if ((index + 1) % 7 == 0 && index != 0) { %>
              <div class="goal"><%%= weekly_total + ' hours' %></div>
              <%% weekly_total = 0; %>
            <%% } %>
          <%% }); %>

        </div>
      </div>

      <div class="col-md-10">
        <div class="clndr-grid">
          <div class="days-of-the-week">
            <%% //console.log(_.size(days)); %>
            <%% _.each(daysOfTheWeek, function(day) { %>
              <div class="header-day"><%%= day %></div>
            <%% }); %>

            <div class="clearfix"></div>

            <div class="days">
              <%% _.each(days, function(day, index) { %>
                <%% //console.log('index is ' + index); %>

                <div class="<%%= day.classes %> <%%= day.date.format('ddd').toLowerCase() %>" data-index="<%%= index %>" data-toggle="modal" data-target="#activityForm" data-date="<%%= day.date.format('GGGG-MM-DD') %>">
                  <span class="options"></span>
                  <span class="clndr-day pull-right"><%%= day.day %></span>

                  <%% if (!_.isEmpty(day.events)) { %>
                    <%% var category = findCategoryById(day.events[0].category_id); %>
                    <div class="activity" style="background-color: <%%= category.color() %>;">
                      <div class="duration">
                        <%%= day.events[0].duration / 60 + " h" %>
                      </div>
                      <div class="category">
                        <%%= category.label() %>
                      </div>
                    </div>
                  <%% } %>
                </div>

              <%% }); %>

              <div class="clearfix"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  
  </script>
</div>

<h2>Categories</h2>

<div id="categories" data-bind="foreach: categories">
  <div class="category">
    <div style="height: 10px; width: 10px; margin-right: 10px; float: left;" class="category-color" data-bind="style: { backgroundColor: color }, click: editColor">
    </div>

    <span data-bind="visible: !editing(), text: label, click: edit"></span>
    <input data-bind="visible: editing, value: label, hasFocus: editing">

    <a href="#" data-bind="click: $root.removeCategory">Remove</a>
  </div>
  <input data-bind="visible: editingColor, value: color, hasFocus: editingColor">
</div>
  
  <form role="form">
    <div class="form-group">
      <label for="label">New Category</label>
      <input id="label" type="text" class="form-control" placeholder="New category label">
    </div>
    <div class="form-group">
      <label for="color">Color</label>
      <input id="color" type="text" class="form-control" placeholder="Hex code">
    </div>
    <button data-bind="click: addCategory" class="btn btn-default">Create</button>
  </form>
</div>

<!-- Modal -->
<div class="modal fade" id="activityForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title" id="myModalLabel">New Activity</h4>
      </div>
      <div class="modal-body">

        <form class="form-horizontal" role="form">
          <div class="form-group">
            <label for="inputEmail3" class="col-sm-2 control-label">Duration</label>
            <div class="col-sm-10">
              <div class="input-group">
                <input id="hours" type="text" class="form-control">
                <span class="input-group-addon">h</span>
                <input id="minutes" type="text" class="form-control">
                <span class="input-group-addon">m</span>
              </div>  
            </div>
          </div>
          <div class="form-group">
            <label for="category" class="col-sm-2 control-label">Category</label>
            <div class="col-sm-10">
              <select data-bind="options: categories, optionsText: 'label', optionsValue: 'id'" id="category" class="form-control chosen-select">
              </select>
            </div>
          </div>
        </form>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger pull-left">Delete</button>
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->



<script>
  var categoryArray = new Array();
  var eventArray = new Array();
  var viewModel;

  var categoryIndex = 1;

  function CategoryViewModel(id, label, color) {
    this.id = id;
    this.label = ko.observable(label);
    this.color = ko.observable(color);

    this.editingColor = ko.observable(false);
    this.editColor = function() { this.editingColor(true) }
    this.editing = ko.observable(false);

    this.editing.subscribe(function(editing) {
      if (!editing) {
        // #TODO: validation cant be blank
        save();
        refresh();
      }
    });

    this.edit = function() { this.editing(true) }



    this.editingColor.subscribe(function(editing) {
      console.log("clicked");
      if (!editing) {
        save();
        refresh();
      }
    });
  }

  function CategoriesViewModel(categories) {
    var self = this;

    self.categories = ko.observableArray(categories);
    //selectedCategory : ko.observable()

    self.addCategory = function() {
      var label= $('input#label').val();
      var color = $('input#color').val();
      var category = new CategoryViewModel(categoryIndex, label, color);

      //{ id: categoryIndex, label: label, color: color };
      console.log('push ' + category.label + " " + category.color + "; id=" + categoryIndex);
      // remember to always increment after adding; this is the only time to do so
      categoryIndex += 1;
      self.categories.push(category);
      console.log(categoryArray);
      save();
    }

    self.removeCategory = function(category) {
      // TODO: check if any events are linked to the category

      var associatedEvents = findEventsByCategoryId(category.id);

      if (associatedEvents.length > 0) {
        alert("There are events associated with this category. Please reassign them first.");
        return;
      }

      if (confirm('Are you sure you want to delete the category: ' + category.label() + '?')) {
        self.categories.remove(category);
        console.log(category.label + " removed");
        save();
      }
    }
  }; 

  $(function() {
    loadFromStorage();

    categoryModels = new Array();

    // TODO: change to a $.each ?
    for (var i = 0; i < categoryArray.length; i++) {
      console.log(i);
      category = categoryArray[i];
      categoryModels.push(new CategoryViewModel(category.id, category.label, category.color));
    }


    viewModel = new CategoriesViewModel(categoryModels);

    ko.applyBindings(viewModel);
    console.log('category index is : ' + categoryIndex);

    // specific order necessary: we load viewmodel first and then load events
    // since findCategoryById needs the viewmodel setup to before underscore template for
    // event calendar can run w/o errorss
    refresh();
  });

  // TODO: after loading category array
  // gets the highest category id and sets the category index
  function setCategoryIndex() {
    var max = 1;

    for (var i = 0; i < categoryArray.length; i++) {
      var id = parseInt(categoryArray[i].id)
      if (id > max) {
        max = id;
      }
    }

    categoryIndex = max + 1;
  }

  function findEventsByCategoryId(category_id) {
    var result = $.grep(eventArray, function(e) { return e.category_id == category_id; });
    return result;
  }

  function findCategoryById(id) {
    var result = $.grep(viewModel.categories(), function(e) { return e.id == id; });

    if (result.length == 0) {
      return false
    } else if (result.length == 1) {
      //found it
      return result[0];
    } else {
      // multiple items found this should never happen since ids are guaranteed to be unique
      console.log('findCategoryById: ERROR - found multiple categories for id ' + id);
    }
  }

  function loadFromStorage() {
    if (!Modernizr.localstorage) { return false; }

    // TODO: change these to constant keys

    // should this be OR?
    if (localStorage['events'] !== undefined && localStorage['categories'] !== undefined) {
      console.log('events exist');
      eventArray = JSON.parse(localStorage['events']);
      categoryArray = JSON.parse(localStorage['categories']);

      setCategoryIndex(); 

    } else {
      // no previous data
    }
  }

  function refresh() {
    myCal.setEvents(eventArray);
  }

  function save() {
    if (Modernizr.localstorage) {
      localStorage['events'] = JSON.stringify(eventArray);

      // TODO: stringify? get rid of edit key too
      localStorage['categories'] = ko.toJSON(viewModel.categories());//JSON.stringify(categoryArray);
    } else {
      // TODO: no localstorage support
    }
  }

  $(function(){
    $('.chosen-select').chosen({ width: '100%' });
  });

  var myCal = $('.cal-1').clndr({
    daysOfTheWeek: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    template: $('#template-calendar').html(),
    events: eventArray,
    weekOffset: 1 
  });

  $(document).on('click', '[data-toggle="modal"]', function() {
    var event = $(this).hasClass('event');

    $('#activityForm').data('date', $(this).data('date'));
    console.log('modifying date: ' + $(this).data('date'));


    if (event) {
      var index = parseInt($(this).data('index'));
      console.log(myCal);
      $('.modal').data('mode', 'edit');
      setModalMode('edit');

    } else {
      // new event
      console.log('no event'); 
      setModalMode('new');
    }
  });

  function setModalMode(mode) {
    console.log("setting mode to " + mode);
    $('#activityForm').data('mode', mode);

    if (mode == 'new') {
      $('.btn-danger').hide();
      $('#hours').val('');
      $('#minutes').val('');
      $('#category').val('0');
    } else {
      // edit mode
      $('.btn-danger').show();


      // TODO: get the date from the event array

      var date = $('#activityForm').data('date');
      console.log("setting modal mode: " + date);

      var result = $.grep(eventArray, function(e) { return e.date == date });      
      console.log('result is ' + result);
      console.log(result);

      result = result[0];

      var hours = Math.floor(result.duration / 60);
      var minutes = result.duration % 60;
      var category = result.category_id;

      $('#hours').val(hours);
      $('#minutes').val(minutes);
      $('#category').val(category);
    }

    $('#category').trigger('chosen:updated');
    console.log("mode is " + $('#activityForm').data('mode'));
  }

  $('.modal-footer .btn-danger').click(function() {
    if (confirm('Are you sure?')) {
      console.log('get and delete the event'); 
      $('.modal').modal('hide');


      var date = $('#activityForm').data('date');
      console.log('deleting: ' + date);
      var result = $.grep(eventArray, function(e) { return e.date == date });   
      result = result[0];
      var index = eventArray.indexOf(result);
      console.log('index is ' + index);
      eventArray.splice(index, 1);
      refresh();

      // TODO: actually remove the event
      save();
    }
  });

  function inEditMode() {
    return $('.modal').data('mode') == 'edit';
  }

  $('.btn-primary').click(function() {
    var date = $('#activityForm').data('date');

    console.log('clicked save for date: ' + date)

    // TODO: validation here

    var hours = parseInt($('#hours').val());
    var minutes = parseInt($('#minutes').val());
    var category_id = parseInt($('#category').val()); // #TODO: make this an integer
    var duration = (hours * 60) + minutes;

    var event = {
      date: date,
      duration: duration,
      category_id: category_id
    }

    // TODO: toss into add edit methods

    if (inEditMode()) {
      console.log('update and save');
      // update events array [x]
      var result = $.grep(eventArray, function(e) { return e.date == date });   
      result = result[0];
      var index = eventArray.indexOf(result);
      eventArray[index] = event;
    } else {
      // get implied date
      console.log('create new');
      // insert into events array[x]
      console.log('event array length ' + eventArray.length);
      console.log('duration is new' + duration);

      eventArray.push(event);

      // APPEND The array?
      //myCal.addEvents(additionalEventsArray);
      console.log('event array length after ' + eventArray.length);
    }

    refresh();
    save();
    // TODO: validation
    $('.modal').modal('hide');
  });

  </script>
